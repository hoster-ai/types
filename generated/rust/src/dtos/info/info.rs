use serde::{Serialize, Deserialize};

#[derive(Serialize, Deserialize, Debug)]
pub struct Info {
    pub label: String,
    pub url: String,
    pub icon: String,
    pub label: String,
    pub each: true }),
    pub tabs: Vec<TabDto>,
    pub title: String,
    pub logo: Option<String>,
    pub description: Option<String>,
    pub each: true }),
    pub supported_languages: Vec<LanguageEnum>,
    pub product_attributes: Option<Vec<FieldDto>>,
    pub item_attributes: Option<Vec<FieldDto>>,
    pub listen_events: Option<Vec<EventsEnum>>,
    pub each: true }),
    pub required_roles: Option<Vec<RolesEnum>>,
    pub unsupported_actions: Vec<ActionsEnum>,
    pub admin_panel: Option<{>,
    pub product_tabs: Option<Vec<TabDto>>,
    pub actions: Option<{>,
    pub client: Option<Vec<ActionDto>>,
    pub item: Option<Vec<ActionDto>>,
    pub menu: Option<MenuDto>,
    pub settings: Option<MenuDto>,
    pub client_panel: Option<{>,
    pub product_tabs: Option<Vec<TabDto>>,
    pub actions: Option<{>,
    pub item: Option<Vec<ActionDto>>,
    pub menu: Option<MenuDto>,
    pub onboarding_url: Option<String>,
    pub pay_per_use_units: Option<Vec<UnitDto>>,
    pub response_data_field_names: Option<std::collections::HashMap<keyof ResponseDataDto, String>>,
}
